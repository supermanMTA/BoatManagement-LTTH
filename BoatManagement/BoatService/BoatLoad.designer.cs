#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BoatService
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="BoatManagement")]
	public partial class BoatLoadDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBoat(Boat instance);
    partial void UpdateBoat(Boat instance);
    partial void DeleteBoat(Boat instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertBoatLostInfor(BoatLostInfor instance);
    partial void UpdateBoatLostInfor(BoatLostInfor instance);
    partial void DeleteBoatLostInfor(BoatLostInfor instance);
    partial void InsertJourney(Journey instance);
    partial void UpdateJourney(Journey instance);
    partial void DeleteJourney(Journey instance);
    partial void InsertNational(National instance);
    partial void UpdateNational(National instance);
    partial void DeleteNational(National instance);
    partial void InsertParameter(Parameter instance);
    partial void UpdateParameter(Parameter instance);
    partial void DeleteParameter(Parameter instance);
    partial void InsertPort(Port instance);
    partial void UpdatePort(Port instance);
    partial void DeletePort(Port instance);
    partial void InsertPosition(Position instance);
    partial void UpdatePosition(Position instance);
    partial void DeletePosition(Position instance);
    partial void InsertTypeBoat(TypeBoat instance);
    partial void UpdateTypeBoat(TypeBoat instance);
    partial void DeleteTypeBoat(TypeBoat instance);
    #endregion
		
		public BoatLoadDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["BoatManagementConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BoatLoadDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BoatLoadDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BoatLoadDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BoatLoadDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Boat> Boat
		{
			get
			{
				return this.GetTable<Boat>();
			}
		}
		
		public System.Data.Linq.Table<User> User
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<BoatLostInfor> BoatLostInfor
		{
			get
			{
				return this.GetTable<BoatLostInfor>();
			}
		}
		
		public System.Data.Linq.Table<Journey> Journey
		{
			get
			{
				return this.GetTable<Journey>();
			}
		}
		
		public System.Data.Linq.Table<National> National
		{
			get
			{
				return this.GetTable<National>();
			}
		}
		
		public System.Data.Linq.Table<Parameter> Parameter
		{
			get
			{
				return this.GetTable<Parameter>();
			}
		}
		
		public System.Data.Linq.Table<Port> Port
		{
			get
			{
				return this.GetTable<Port>();
			}
		}
		
		public System.Data.Linq.Table<Position> Position
		{
			get
			{
				return this.GetTable<Position>();
			}
		}
		
		public System.Data.Linq.Table<TypeBoat> TypeBoat
		{
			get
			{
				return this.GetTable<TypeBoat>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Boat")]
	public partial class Boat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _IMO;
		
		private string _MMSI;
		
		private System.Nullable<int> _IDNational;
		
		private System.Nullable<int> _IDTypeBoat;
		
		private System.Nullable<double> _Volume;
		
		private System.Nullable<double> _Tonnage;
		
		private System.Nullable<double> _High;
		
		private System.Nullable<double> _Length;
		
		private bool _Status;
		
		private byte[] _Image;
		
		private EntitySet<Journey> _Journey;
		
		private EntityRef<National> _National;
		
		private EntityRef<TypeBoat> _TypeBoat;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIMOChanging(string value);
    partial void OnIMOChanged();
    partial void OnMMSIChanging(string value);
    partial void OnMMSIChanged();
    partial void OnIDNationalChanging(System.Nullable<int> value);
    partial void OnIDNationalChanged();
    partial void OnIDTypeBoatChanging(System.Nullable<int> value);
    partial void OnIDTypeBoatChanged();
    partial void OnVolumeChanging(System.Nullable<double> value);
    partial void OnVolumeChanged();
    partial void OnTonnageChanging(System.Nullable<double> value);
    partial void OnTonnageChanged();
    partial void OnHighChanging(System.Nullable<double> value);
    partial void OnHighChanged();
    partial void OnLengthChanging(System.Nullable<double> value);
    partial void OnLengthChanged();
    partial void OnStatusChanging(bool value);
    partial void OnStatusChanged();
    partial void OnImageChanging(byte[] value);
    partial void OnImageChanged();
    #endregion
		
		public Boat()
		{
			this._Journey = new EntitySet<Journey>(new Action<Journey>(this.attach_Journey), new Action<Journey>(this.detach_Journey));
			this._National = default(EntityRef<National>);
			this._TypeBoat = default(EntityRef<TypeBoat>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IMO", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string IMO
		{
			get
			{
				return this._IMO;
			}
			set
			{
				if ((this._IMO != value))
				{
					this.OnIMOChanging(value);
					this.SendPropertyChanging();
					this._IMO = value;
					this.SendPropertyChanged("IMO");
					this.OnIMOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MMSI", DbType="NChar(9)")]
		public string MMSI
		{
			get
			{
				return this._MMSI;
			}
			set
			{
				if ((this._MMSI != value))
				{
					this.OnMMSIChanging(value);
					this.SendPropertyChanging();
					this._MMSI = value;
					this.SendPropertyChanged("MMSI");
					this.OnMMSIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDNational", DbType="Int")]
		public System.Nullable<int> IDNational
		{
			get
			{
				return this._IDNational;
			}
			set
			{
				if ((this._IDNational != value))
				{
					if (this._National.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDNationalChanging(value);
					this.SendPropertyChanging();
					this._IDNational = value;
					this.SendPropertyChanged("IDNational");
					this.OnIDNationalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDTypeBoat", DbType="Int")]
		public System.Nullable<int> IDTypeBoat
		{
			get
			{
				return this._IDTypeBoat;
			}
			set
			{
				if ((this._IDTypeBoat != value))
				{
					if (this._TypeBoat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDTypeBoatChanging(value);
					this.SendPropertyChanging();
					this._IDTypeBoat = value;
					this.SendPropertyChanged("IDTypeBoat");
					this.OnIDTypeBoatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Volume", DbType="Float")]
		public System.Nullable<double> Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this.OnVolumeChanging(value);
					this.SendPropertyChanging();
					this._Volume = value;
					this.SendPropertyChanged("Volume");
					this.OnVolumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tonnage", DbType="Float")]
		public System.Nullable<double> Tonnage
		{
			get
			{
				return this._Tonnage;
			}
			set
			{
				if ((this._Tonnage != value))
				{
					this.OnTonnageChanging(value);
					this.SendPropertyChanging();
					this._Tonnage = value;
					this.SendPropertyChanged("Tonnage");
					this.OnTonnageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_High", DbType="Float")]
		public System.Nullable<double> High
		{
			get
			{
				return this._High;
			}
			set
			{
				if ((this._High != value))
				{
					this.OnHighChanging(value);
					this.SendPropertyChanging();
					this._High = value;
					this.SendPropertyChanged("High");
					this.OnHighChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Length", DbType="Float")]
		public System.Nullable<double> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit NOT NULL")]
		public bool Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public byte[] Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Boat_Journey", Storage="_Journey", ThisKey="ID", OtherKey="IDBoat")]
		internal EntitySet<Journey> Journey
		{
			get
			{
				return this._Journey;
			}
			set
			{
				this._Journey.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="National_Boat", Storage="_National", ThisKey="IDNational", OtherKey="ID", IsForeignKey=true)]
		public National National
		{
			get
			{
				return this._National.Entity;
			}
			set
			{
				National previousValue = this._National.Entity;
				if (((previousValue != value) 
							|| (this._National.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._National.Entity = null;
						previousValue.Boat.Remove(this);
					}
					this._National.Entity = value;
					if ((value != null))
					{
						value.Boat.Add(this);
						this._IDNational = value.ID;
					}
					else
					{
						this._IDNational = default(Nullable<int>);
					}
					this.SendPropertyChanged("National");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeBoat_Boat", Storage="_TypeBoat", ThisKey="IDTypeBoat", OtherKey="ID", IsForeignKey=true)]
		public TypeBoat TypeBoat
		{
			get
			{
				return this._TypeBoat.Entity;
			}
			set
			{
				TypeBoat previousValue = this._TypeBoat.Entity;
				if (((previousValue != value) 
							|| (this._TypeBoat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeBoat.Entity = null;
						previousValue.Boat.Remove(this);
					}
					this._TypeBoat.Entity = value;
					if ((value != null))
					{
						value.Boat.Add(this);
						this._IDTypeBoat = value.ID;
					}
					else
					{
						this._IDTypeBoat = default(Nullable<int>);
					}
					this.SendPropertyChanged("TypeBoat");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Journey(Journey entity)
		{
			this.SendPropertyChanging();
			entity.Boat = this;
		}
		
		private void detach_Journey(Journey entity)
		{
			this.SendPropertyChanging();
			entity.Boat = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Account;
		
		private string _Password;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountChanging(string value);
    partial void OnAccountChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public User()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Account
		{
			get
			{
				return this._Account;
			}
			set
			{
				if ((this._Account != value))
				{
					this.OnAccountChanging(value);
					this.SendPropertyChanging();
					this._Account = value;
					this.SendPropertyChanged("Account");
					this.OnAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BoatLostInfor")]
	public partial class BoatLostInfor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _LastConnect;
		
		private System.Nullable<double> _Longitude;
		
		private System.Nullable<double> _Latitude;
		
		private System.Nullable<int> _IDJourney;
		
		private System.Nullable<bool> _Status;
		
		private System.Nullable<int> _IDBoat;
		
		private string _Ocean;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLastConnectChanging(System.Nullable<System.DateTime> value);
    partial void OnLastConnectChanged();
    partial void OnLongitudeChanging(System.Nullable<double> value);
    partial void OnLongitudeChanged();
    partial void OnLatitudeChanging(System.Nullable<double> value);
    partial void OnLatitudeChanged();
    partial void OnIDJourneyChanging(System.Nullable<int> value);
    partial void OnIDJourneyChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    partial void OnIDBoatChanging(System.Nullable<int> value);
    partial void OnIDBoatChanged();
    partial void OnOceanChanging(string value);
    partial void OnOceanChanged();
    #endregion
		
		public BoatLostInfor()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastConnect", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastConnect
		{
			get
			{
				return this._LastConnect;
			}
			set
			{
				if ((this._LastConnect != value))
				{
					this.OnLastConnectChanging(value);
					this.SendPropertyChanging();
					this._LastConnect = value;
					this.SendPropertyChanged("LastConnect");
					this.OnLastConnectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="Float")]
		public System.Nullable<double> Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Float")]
		public System.Nullable<double> Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDJourney", DbType="Int")]
		public System.Nullable<int> IDJourney
		{
			get
			{
				return this._IDJourney;
			}
			set
			{
				if ((this._IDJourney != value))
				{
					this.OnIDJourneyChanging(value);
					this.SendPropertyChanging();
					this._IDJourney = value;
					this.SendPropertyChanged("IDJourney");
					this.OnIDJourneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit")]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDBoat", DbType="Int")]
		public System.Nullable<int> IDBoat
		{
			get
			{
				return this._IDBoat;
			}
			set
			{
				if ((this._IDBoat != value))
				{
					this.OnIDBoatChanging(value);
					this.SendPropertyChanging();
					this._IDBoat = value;
					this.SendPropertyChanged("IDBoat");
					this.OnIDBoatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ocean", DbType="NVarChar(50)")]
		public string Ocean
		{
			get
			{
				return this._Ocean;
			}
			set
			{
				if ((this._Ocean != value))
				{
					this.OnOceanChanging(value);
					this.SendPropertyChanging();
					this._Ocean = value;
					this.SendPropertyChanged("Ocean");
					this.OnOceanChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Journey")]
	public partial class Journey : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _IDBoat;
		
		private System.Nullable<int> _BeginPosition;
		
		private System.Nullable<int> _EndPosition;
		
		private System.Nullable<double> _TimeProvide;
		
		private System.Nullable<System.DateTime> _TimeBegin;
		
		private System.Nullable<System.DateTime> _TimeEnd;
		
		private System.Nullable<bool> _Status;
		
		private EntitySet<Position> _Position;
		
		private EntityRef<Boat> _Boat;
		
		private EntityRef<Port> _Port;
		
		private EntityRef<Port> _Port1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIDBoatChanging(System.Nullable<int> value);
    partial void OnIDBoatChanged();
    partial void OnBeginPositionChanging(System.Nullable<int> value);
    partial void OnBeginPositionChanged();
    partial void OnEndPositionChanging(System.Nullable<int> value);
    partial void OnEndPositionChanged();
    partial void OnTimeProvideChanging(System.Nullable<double> value);
    partial void OnTimeProvideChanged();
    partial void OnTimeBeginChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeBeginChanged();
    partial void OnTimeEndChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeEndChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    #endregion
		
		public Journey()
		{
			this._Position = new EntitySet<Position>(new Action<Position>(this.attach_Position), new Action<Position>(this.detach_Position));
			this._Boat = default(EntityRef<Boat>);
			this._Port = default(EntityRef<Port>);
			this._Port1 = default(EntityRef<Port>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDBoat", DbType="Int")]
		public System.Nullable<int> IDBoat
		{
			get
			{
				return this._IDBoat;
			}
			set
			{
				if ((this._IDBoat != value))
				{
					if (this._Boat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDBoatChanging(value);
					this.SendPropertyChanging();
					this._IDBoat = value;
					this.SendPropertyChanged("IDBoat");
					this.OnIDBoatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginPosition", DbType="Int")]
		public System.Nullable<int> BeginPosition
		{
			get
			{
				return this._BeginPosition;
			}
			set
			{
				if ((this._BeginPosition != value))
				{
					if (this._Port.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBeginPositionChanging(value);
					this.SendPropertyChanging();
					this._BeginPosition = value;
					this.SendPropertyChanged("BeginPosition");
					this.OnBeginPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndPosition", DbType="Int")]
		public System.Nullable<int> EndPosition
		{
			get
			{
				return this._EndPosition;
			}
			set
			{
				if ((this._EndPosition != value))
				{
					if (this._Port1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEndPositionChanging(value);
					this.SendPropertyChanging();
					this._EndPosition = value;
					this.SendPropertyChanged("EndPosition");
					this.OnEndPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeProvide", DbType="Float")]
		public System.Nullable<double> TimeProvide
		{
			get
			{
				return this._TimeProvide;
			}
			set
			{
				if ((this._TimeProvide != value))
				{
					this.OnTimeProvideChanging(value);
					this.SendPropertyChanging();
					this._TimeProvide = value;
					this.SendPropertyChanged("TimeProvide");
					this.OnTimeProvideChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeBegin", DbType="DateTime")]
		public System.Nullable<System.DateTime> TimeBegin
		{
			get
			{
				return this._TimeBegin;
			}
			set
			{
				if ((this._TimeBegin != value))
				{
					this.OnTimeBeginChanging(value);
					this.SendPropertyChanging();
					this._TimeBegin = value;
					this.SendPropertyChanged("TimeBegin");
					this.OnTimeBeginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeEnd", DbType="DateTime")]
		public System.Nullable<System.DateTime> TimeEnd
		{
			get
			{
				return this._TimeEnd;
			}
			set
			{
				if ((this._TimeEnd != value))
				{
					this.OnTimeEndChanging(value);
					this.SendPropertyChanging();
					this._TimeEnd = value;
					this.SendPropertyChanged("TimeEnd");
					this.OnTimeEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit")]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Journey_Position", Storage="_Position", ThisKey="ID", OtherKey="IDJourney")]
		internal EntitySet<Position> Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				this._Position.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Boat_Journey", Storage="_Boat", ThisKey="IDBoat", OtherKey="ID", IsForeignKey=true)]
		public Boat Boat
		{
			get
			{
				return this._Boat.Entity;
			}
			set
			{
				Boat previousValue = this._Boat.Entity;
				if (((previousValue != value) 
							|| (this._Boat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Boat.Entity = null;
						previousValue.Journey.Remove(this);
					}
					this._Boat.Entity = value;
					if ((value != null))
					{
						value.Journey.Add(this);
						this._IDBoat = value.ID;
					}
					else
					{
						this._IDBoat = default(Nullable<int>);
					}
					this.SendPropertyChanged("Boat");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Port_Journey", Storage="_Port", ThisKey="BeginPosition", OtherKey="ID", IsForeignKey=true)]
		public Port Port
		{
			get
			{
				return this._Port.Entity;
			}
			set
			{
				Port previousValue = this._Port.Entity;
				if (((previousValue != value) 
							|| (this._Port.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Port.Entity = null;
						previousValue.Journey.Remove(this);
					}
					this._Port.Entity = value;
					if ((value != null))
					{
						value.Journey.Add(this);
						this._BeginPosition = value.ID;
					}
					else
					{
						this._BeginPosition = default(Nullable<int>);
					}
					this.SendPropertyChanged("Port");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Port_Journey1", Storage="_Port1", ThisKey="EndPosition", OtherKey="ID", IsForeignKey=true)]
		public Port Port1
		{
			get
			{
				return this._Port1.Entity;
			}
			set
			{
				Port previousValue = this._Port1.Entity;
				if (((previousValue != value) 
							|| (this._Port1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Port1.Entity = null;
						previousValue.Journey1.Remove(this);
					}
					this._Port1.Entity = value;
					if ((value != null))
					{
						value.Journey1.Add(this);
						this._EndPosition = value.ID;
					}
					else
					{
						this._EndPosition = default(Nullable<int>);
					}
					this.SendPropertyChanged("Port1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Position(Position entity)
		{
			this.SendPropertyChanging();
			entity.Journey = this;
		}
		
		private void detach_Position(Position entity)
		{
			this.SendPropertyChanging();
			entity.Journey = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[National]")]
	public partial class National : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private byte[] _Image;
		
		private EntitySet<Boat> _Boat;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnImageChanging(byte[] value);
    partial void OnImageChanged();
    #endregion
		
		public National()
		{
			this._Boat = new EntitySet<Boat>(new Action<Boat>(this.attach_Boat), new Action<Boat>(this.detach_Boat));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public byte[] Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="National_Boat", Storage="_Boat", ThisKey="ID", OtherKey="IDNational")]
		internal EntitySet<Boat> Boat
		{
			get
			{
				return this._Boat;
			}
			set
			{
				this._Boat.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Boat(Boat entity)
		{
			this.SendPropertyChanging();
			entity.National = this;
		}
		
		private void detach_Boat(Boat entity)
		{
			this.SendPropertyChanging();
			entity.National = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Parameter")]
	public partial class Parameter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _IDPosition;
		
		private System.Nullable<double> _Speed;
		
		private System.Nullable<double> _Waterlevel;
		
		private System.Nullable<double> _Wind;
		
		private string _Weather;
		
		private EntityRef<Position> _Position;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIDPositionChanging(System.Nullable<int> value);
    partial void OnIDPositionChanged();
    partial void OnSpeedChanging(System.Nullable<double> value);
    partial void OnSpeedChanged();
    partial void OnWaterlevelChanging(System.Nullable<double> value);
    partial void OnWaterlevelChanged();
    partial void OnWindChanging(System.Nullable<double> value);
    partial void OnWindChanged();
    partial void OnWeatherChanging(string value);
    partial void OnWeatherChanged();
    #endregion
		
		public Parameter()
		{
			this._Position = default(EntityRef<Position>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPosition", DbType="Int")]
		public System.Nullable<int> IDPosition
		{
			get
			{
				return this._IDPosition;
			}
			set
			{
				if ((this._IDPosition != value))
				{
					if (this._Position.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDPositionChanging(value);
					this.SendPropertyChanging();
					this._IDPosition = value;
					this.SendPropertyChanged("IDPosition");
					this.OnIDPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Speed", DbType="Float")]
		public System.Nullable<double> Speed
		{
			get
			{
				return this._Speed;
			}
			set
			{
				if ((this._Speed != value))
				{
					this.OnSpeedChanging(value);
					this.SendPropertyChanging();
					this._Speed = value;
					this.SendPropertyChanged("Speed");
					this.OnSpeedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Waterlevel", DbType="Float")]
		public System.Nullable<double> Waterlevel
		{
			get
			{
				return this._Waterlevel;
			}
			set
			{
				if ((this._Waterlevel != value))
				{
					this.OnWaterlevelChanging(value);
					this.SendPropertyChanging();
					this._Waterlevel = value;
					this.SendPropertyChanged("Waterlevel");
					this.OnWaterlevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wind", DbType="Float")]
		public System.Nullable<double> Wind
		{
			get
			{
				return this._Wind;
			}
			set
			{
				if ((this._Wind != value))
				{
					this.OnWindChanging(value);
					this.SendPropertyChanging();
					this._Wind = value;
					this.SendPropertyChanged("Wind");
					this.OnWindChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weather", DbType="NVarChar(50)")]
		public string Weather
		{
			get
			{
				return this._Weather;
			}
			set
			{
				if ((this._Weather != value))
				{
					this.OnWeatherChanging(value);
					this.SendPropertyChanging();
					this._Weather = value;
					this.SendPropertyChanged("Weather");
					this.OnWeatherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Position_Parameter", Storage="_Position", ThisKey="IDPosition", OtherKey="ID", IsForeignKey=true)]
		public Position Position
		{
			get
			{
				return this._Position.Entity;
			}
			set
			{
				Position previousValue = this._Position.Entity;
				if (((previousValue != value) 
							|| (this._Position.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Position.Entity = null;
						previousValue.Parameter.Remove(this);
					}
					this._Position.Entity = value;
					if ((value != null))
					{
						value.Parameter.Add(this);
						this._IDPosition = value.ID;
					}
					else
					{
						this._IDPosition = default(Nullable<int>);
					}
					this.SendPropertyChanged("Position");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Port")]
	public partial class Port : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Nullable<double> _Longitude;
		
		private System.Nullable<double> _Latitude;
		
		private System.Nullable<int> _ID_Nation;
		
		private string _Ocean;
		
		private EntitySet<Journey> _Journey;
		
		private EntitySet<Journey> _Journey1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLongitudeChanging(System.Nullable<double> value);
    partial void OnLongitudeChanged();
    partial void OnLatitudeChanging(System.Nullable<double> value);
    partial void OnLatitudeChanged();
    partial void OnID_NationChanging(System.Nullable<int> value);
    partial void OnID_NationChanged();
    partial void OnOceanChanging(string value);
    partial void OnOceanChanged();
    #endregion
		
		public Port()
		{
			this._Journey = new EntitySet<Journey>(new Action<Journey>(this.attach_Journey), new Action<Journey>(this.detach_Journey));
			this._Journey1 = new EntitySet<Journey>(new Action<Journey>(this.attach_Journey1), new Action<Journey>(this.detach_Journey1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="Float")]
		public System.Nullable<double> Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Float")]
		public System.Nullable<double> Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Nation", DbType="Int")]
		public System.Nullable<int> ID_Nation
		{
			get
			{
				return this._ID_Nation;
			}
			set
			{
				if ((this._ID_Nation != value))
				{
					this.OnID_NationChanging(value);
					this.SendPropertyChanging();
					this._ID_Nation = value;
					this.SendPropertyChanged("ID_Nation");
					this.OnID_NationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ocean", DbType="VarChar(50)")]
		public string Ocean
		{
			get
			{
				return this._Ocean;
			}
			set
			{
				if ((this._Ocean != value))
				{
					this.OnOceanChanging(value);
					this.SendPropertyChanging();
					this._Ocean = value;
					this.SendPropertyChanged("Ocean");
					this.OnOceanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Port_Journey", Storage="_Journey", ThisKey="ID", OtherKey="BeginPosition")]
		internal EntitySet<Journey> Journey
		{
			get
			{
				return this._Journey;
			}
			set
			{
				this._Journey.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Port_Journey1", Storage="_Journey1", ThisKey="ID", OtherKey="EndPosition")]
		internal EntitySet<Journey> Journey1
		{
			get
			{
				return this._Journey1;
			}
			set
			{
				this._Journey1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Journey(Journey entity)
		{
			this.SendPropertyChanging();
			entity.Port = this;
		}
		
		private void detach_Journey(Journey entity)
		{
			this.SendPropertyChanging();
			entity.Port = null;
		}
		
		private void attach_Journey1(Journey entity)
		{
			this.SendPropertyChanging();
			entity.Port1 = this;
		}
		
		private void detach_Journey1(Journey entity)
		{
			this.SendPropertyChanging();
			entity.Port1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Position")]
	public partial class Position : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _IDJourney;
		
		private System.Nullable<double> _Longitude;
		
		private System.Nullable<double> _Latitude;
		
		private System.Nullable<System.DateTime> _Time;
		
		private string _Oceans;
		
		private EntitySet<Parameter> _Parameter;
		
		private EntityRef<Journey> _Journey;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIDJourneyChanging(System.Nullable<int> value);
    partial void OnIDJourneyChanged();
    partial void OnLongitudeChanging(System.Nullable<double> value);
    partial void OnLongitudeChanged();
    partial void OnLatitudeChanging(System.Nullable<double> value);
    partial void OnLatitudeChanged();
    partial void OnTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeChanged();
    partial void OnOceansChanging(string value);
    partial void OnOceansChanged();
    #endregion
		
		public Position()
		{
			this._Parameter = new EntitySet<Parameter>(new Action<Parameter>(this.attach_Parameter), new Action<Parameter>(this.detach_Parameter));
			this._Journey = default(EntityRef<Journey>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDJourney", DbType="Int")]
		public System.Nullable<int> IDJourney
		{
			get
			{
				return this._IDJourney;
			}
			set
			{
				if ((this._IDJourney != value))
				{
					if (this._Journey.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDJourneyChanging(value);
					this.SendPropertyChanging();
					this._IDJourney = value;
					this.SendPropertyChanged("IDJourney");
					this.OnIDJourneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="Float")]
		public System.Nullable<double> Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Float")]
		public System.Nullable<double> Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime")]
		public System.Nullable<System.DateTime> Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Oceans", DbType="VarChar(50)")]
		public string Oceans
		{
			get
			{
				return this._Oceans;
			}
			set
			{
				if ((this._Oceans != value))
				{
					this.OnOceansChanging(value);
					this.SendPropertyChanging();
					this._Oceans = value;
					this.SendPropertyChanged("Oceans");
					this.OnOceansChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Position_Parameter", Storage="_Parameter", ThisKey="ID", OtherKey="IDPosition")]
		internal EntitySet<Parameter> Parameter
		{
			get
			{
				return this._Parameter;
			}
			set
			{
				this._Parameter.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Journey_Position", Storage="_Journey", ThisKey="IDJourney", OtherKey="ID", IsForeignKey=true)]
		public Journey Journey
		{
			get
			{
				return this._Journey.Entity;
			}
			set
			{
				Journey previousValue = this._Journey.Entity;
				if (((previousValue != value) 
							|| (this._Journey.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Journey.Entity = null;
						previousValue.Position.Remove(this);
					}
					this._Journey.Entity = value;
					if ((value != null))
					{
						value.Position.Add(this);
						this._IDJourney = value.ID;
					}
					else
					{
						this._IDJourney = default(Nullable<int>);
					}
					this.SendPropertyChanged("Journey");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Parameter(Parameter entity)
		{
			this.SendPropertyChanging();
			entity.Position = this;
		}
		
		private void detach_Parameter(Parameter entity)
		{
			this.SendPropertyChanging();
			entity.Position = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TypeBoat")]
	public partial class TypeBoat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<Boat> _Boat;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public TypeBoat()
		{
			this._Boat = new EntitySet<Boat>(new Action<Boat>(this.attach_Boat), new Action<Boat>(this.detach_Boat));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="Char(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeBoat_Boat", Storage="_Boat", ThisKey="ID", OtherKey="IDTypeBoat")]
		internal EntitySet<Boat> Boat
		{
			get
			{
				return this._Boat;
			}
			set
			{
				this._Boat.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Boat(Boat entity)
		{
			this.SendPropertyChanging();
			entity.TypeBoat = this;
		}
		
		private void detach_Boat(Boat entity)
		{
			this.SendPropertyChanging();
			entity.TypeBoat = null;
		}
	}
}
#pragma warning restore 1591
